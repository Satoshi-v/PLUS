#!/bin/bash
# Autor: T3mma
# GitHub: https://github.com/Jrohy/multi-v2ray

# Horário de execução da tarefa programada no Brasil (0~23)
BRASIL_HORARIO_ATUALIZACAO=-3

# Registrar o diretório em que o script foi executado pela primeira vez
BEGIN_PATH=$(pwd)

# Método de instalação, 0 para nova instalação, 1 para atualizar mantendo a configuração do V2Ray
INSTALL_WAY=0

# Definir variável de operação, 0 para não, 1 para sim
HELP=0
REMOVE=0

BASE_SOURCE_PATH="https://multi.netlify.app"
UTIL_PATH="/etc/v2ray_util/util.cfg"
UTIL_CFG="$BASE_SOURCE_PATH/v2ray_util/util_core/util.cfg"
BASH_COMPLETION_SHELL="$BASE_SOURCE_PATH/v2ray"
CLEAN_IPTABLES_SHELL="$BASE_SOURCE_PATH/v2ray_util/global_setting/clean_iptables.sh"

# Cancelar alias temporariamente no CentOS
[[ -f /etc/redhat-release && -z $(echo $SHELL | grep zsh) ]] && unalias -a
[[ -z $(echo $SHELL | grep zsh) ]] && ENV_FILE=".bashrc" || ENV_FILE=".zshrc"

####### Código de cores ########
RED="31m"
GREEN="32m"
YELLOW="33m"
BLUE="36m"
FUCHSIA="35m"

colorEcho() {
    COLOR=$1
    echo -e "\033[${COLOR}${@:2}\033[0m"
}

####### Obter parâmetros #########
while [[ $# > 0 ]]; do
    key="$1"
    case $key in
    --remove)
        REMOVE=1
        ;;
    -h | --help)
        HELP=1
        ;;
    -k | --keep)
        INSTALL_WAY=1
        colorEcho ${BLUE} "mantendo configuração atualizada\n"
        ;;
    *)
        # opção desconhecida
        ;;
    esac
    shift # próxima opção ou valor
done
#############################

help() {
    echo "bash v2ray.sh [-h|--ajuda] [-k|--manter] [--remover]"
    echo "  -h, --ajuda          Mostra esta ajuda"
    echo "  -k, --manter         Mantém o config.json ao atualizar"
    echo "      --remover        Remove V2Ray, XRay e Multi-V2Ray"
    echo "                       Sem parâmetros para nova instalação"
    return 0
}

removeV2Ray() {
    # Desinstalar o script do V2Ray
    bash <(curl -L -s https://multi.netlify.app/go.sh) --remove >/dev/null 2>&1
    rm -rf /etc/v2ray >/dev/null 2>&1
    rm -rf /var/log/v2ray >/dev/null 2>&1

    # Desinstalar o script do XRay
    bash <(curl -L -s https://multi.netlify.app/go.sh) --remove -x >/dev/null 2>&1
    rm -rf /etc/xray >/dev/null 2>&1
    rm -rf /var/log/xray >/dev/null 2>&1

    # Limpar as regras do iptables relacionadas ao V2Ray
    bash <(curl -L -s $CLEAN_IPTABLES_SHELL)

    # Desinstalar Multi-V2Ray
    if [[ $(lsb_release -is) == "Ubuntu" && $(printf '%s\n' "24.04" "$(lsb_release -rs)" | sort -V | head -n1) == "24.04" ]]; then
        pipx uninstall v2ray_util
    else
        pip uninstall v2ray_util -y
    fi
    pip uninstall v2ray_util -y
    rm -rf /usr/share/bash-completion/completions/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/v2ray >/dev/null 2>&1
    rm -rf /usr/share/bash-completion/completions/xray >/dev/null 2>&1
    rm -rf /etc/bash_completion.d/v2ray.bash >/dev/null 2>&1
    rm -rf /usr/local/bin/v2ray >/dev/null 2>&1
    rm -rf /etc/v2ray_util >/dev/null 2>&1

    # Remover a tarefa programada de atualização do V2Ray
    crontab -l | sed '/SHELL=/d;/v2ray/d' | sed '/SHELL=/d;/xray/d' >crontab.txt
    crontab crontab.txt >/dev/null 2>&1
    rm -f crontab.txt >/dev/null 2>&1

    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        systemctl restart crond >/dev/null 2>&1
    else
        systemctl restart cron >/dev/null 2>&1
    fi

    # Remover as variáveis de ambiente do Multi-V2Ray
    sed -i '/v2ray/d' ~/$ENV_FILE
    sed -i '/xray/d' ~/$ENV_FILE
    source ~/$ENV_FILE

    colorEcho ${GREEN} "Desinstalação concluída com sucesso!"
}

closeSELinux() {
    # Desabilitar o SELinux
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

checkSys() {
    # Verificar se é Root
    [ $(id -u) != "0" ] && {
        colorEcho ${RED} "Erro: Você deve ser root para executar este script"
        exit 1
    }

    if [[ $(command -v apt-get) ]]; then
        PACKAGE_MANAGER='apt-get'
    elif [[ $(command -v dnf) ]]; then
        PACKAGE_MANAGER='dnf'
    elif [[ $(command -v yum) ]]; then
        PACKAGE_MANAGER='yum'
    else
        colorEcho $RED "Sistema operacional não suportado!"
        exit 1
    fi
}

installDependent() {
    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        ${PACKAGE_MANAGER} install socat crontabs bash-completion which -y
    else
        ${PACKAGE_MANAGER} update
        ${PACKAGE_MANAGER} install socat cron bash-completion ntpdate -y
    fi

    # Instalar python3 & pip
    source <(curl -sL https://python3.netlify.app/install.sh)
}

updateProject() {
    [[ ! $(type pip 2>/dev/null) ]] && colorEcho $RED "pip não está instalado!" && exit 1

    if [[ $(lsb_release -is) == "Ubuntu" && $(printf '%s\n' "24.04" "$(lsb_release -rs)" | sort -V | head -n1) == "24.04" ]]; then
        apt install pipx -y
        pipx ensurepath
        pipx install v2ray_util
        pipx runpip v2ray-util install setuptools
    else
        pip install -U v2ray_util
    fi

    if [[ -e $UTIL_PATH ]]; then
        [[ -z $(cat $UTIL_PATH | grep lang) ]] && echo "lang=pt_BR" >>$UTIL_PATH
    else
        mkdir -p /etc/v2ray_util
        curl $UTIL_CFG >$UTIL_PATH
    fi

    rm -f /usr/local/bin/v2ray >/dev/null 2>&1
    ln -s $(which v2ray-util) /usr/local/bin/v2ray
    rm -f /usr/local/bin/xray >/dev/null 2>&1
    ln -s $(which v2ray-util) /usr/local/bin/xray

    # Remover o antigo script de bash_completion do V2Ray
    [[ -e /etc/bash_completion.d/v2ray.bash ]] && rm -f /etc/bash_completion.d/v2ray.bash
    [[ -e /usr/share/bash-completion/completions/v2ray.bash ]] && rm -f /usr/share/bash-completion/completions/v2ray.bash

    # Atualizar o script de bash_completion do V2Ray
    curl $BASH_COMPLETION_SHELL >/usr/share/bash-completion/completions/v2ray
    curl $BASH_COMPLETION_SHELL >/usr/share/bash-completion/completions/xray
    if [[ -z $(echo $SHELL | grep zsh) ]]; then
        source /usr/share/bash-completion/completions/v2ray
        source /usr/share/bash-completion/completions/xray
    fi

    # Instalar o programa principal do V2Ray
    [[ ${INSTALL_WAY} == 0 ]] && bash <(curl -L -s https://multi.netlify.app/go.sh)
}

timeSync() {
    if [[ $(command -v ntpdate) ]]; then
        ntpdate pool.ntp.org
    fi
}

crontabUpdate() {
    # Remover V2Ray/XRay do cron
    crontab -l | sed '/v2ray/d;/xray/d' | sed '/v2ray/d;/xray/d' >crontab.txt
    # Adicionar Multi-V2Ray ao cron
    echo "SHELL=/bin/bash" >>crontab.txt
    echo "$(expr ${BRASIL_HORARIO_ATUALIZACAO} + 0) 4 * * * v2ray update >/dev/null 2>&1" >>crontab.txt
    crontab crontab.txt >/dev/null 2>&1
    rm -f crontab.txt >/dev/null 2>&1

    if [[ ${PACKAGE_MANAGER} == 'dnf' || ${PACKAGE_MANAGER} == 'yum' ]]; then
        systemctl restart crond >/dev/null 2>&1
    else
        systemctl restart cron >/dev/null 2>&1
    fi
}

installFinished() {
    cd ${BEGIN_PATH}
    [[ ${INSTALL_WAY} == 0 ]] && mode="instalação" || mode="atualização"
    colorEcho ${GREEN} "Multi-V2Ray ${mode} concluída com sucesso"
    [[ ${INSTALL_WAY} == 0 ]] && colorEcho ${GREEN} "Digite 'v2ray' para acessar o menu principal"
}

main() {
    [[ ${HELP} == 1 ]] && help && return
    [[ ${REMOVE} == 1 ]] && removeV2Ray && return
    [[ ${INSTALL_WAY} == 0 ]] && colorEcho ${BLUE} "Instalando novo Multi-V2Ray"
    checkSys
    closeSELinux
    installDependent
    updateProject
    crontabUpdate
    timeSync
    installFinished
}

main
